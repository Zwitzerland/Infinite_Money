"""Core event dataclasses for the backtesting engine.

These events drive the event-driven architecture by representing
market data, trading signals, orders and fills.
"""
from __future__ import annotations

from dataclasses import dataclass
from enum import Enum
from typing import Literal


class OrderSide(str, Enum):
    """Order direction."""

    BUY = "BUY"
    SELL = "SELL"


@dataclass(frozen=True)
class MarketEvent:
    """Represents new market data availability."""

    symbol: str
    timestamp: int


@dataclass(frozen=True)
class SignalEvent:
    """A trading signal from an alpha model."""

    symbol: str
    timestamp: int
    strength: float


@dataclass(frozen=True)
class OrderEvent:
    """An order generated by the portfolio or execution handler."""

    symbol: str
    side: OrderSide
    quantity: int
    timestamp: int
    order_type: Literal["market", "limit"] = "market"


@dataclass(frozen=True)
class FillEvent:
    """Notification of an executed order."""

    symbol: str
    side: OrderSide
    quantity: int
    price: float
    timestamp: int
    commission: float
