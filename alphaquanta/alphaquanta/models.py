"""Core data models for AlphaQuanta trading system."""

from typing import Any, Dict, List, Optional, Union
from pydantic import BaseModel, Field, ConfigDict
from enum import Enum
from datetime import datetime
import hashlib
import json


class TradingMode(str, Enum):
    """Trading execution modes."""
    PAPER = "paper"
    LIVE = "live"
    BACKTEST = "backtest"


class OrderType(str, Enum):
    """Order types for trading."""
    MARKET = "MKT"
    LIMIT = "LMT"
    STOP = "STP"
    STOP_LIMIT = "STP LMT"


class OrderSide(str, Enum):
    """Order sides."""
    BUY = "BUY"
    SELL = "SELL"


class TradeSignal(BaseModel):
    """Trading signal generated by strategy."""
    
    symbol: str = Field(description="Trading symbol")
    side: OrderSide = Field(description="Buy or sell")
    quantity: int = Field(gt=0, description="Number of shares")
    order_type: OrderType = Field(default=OrderType.MARKET, description="Order type")
    limit_price: Optional[float] = Field(default=None, description="Limit price if applicable")
    stop_price: Optional[float] = Field(default=None, description="Stop price if applicable")
    confidence: float = Field(ge=0.0, le=1.0, description="Signal confidence score")
    strategy: str = Field(description="Strategy that generated signal")
    timestamp: datetime = Field(default_factory=datetime.utcnow)
    metadata: Dict[str, Any] = Field(default_factory=dict)


class TradeSet(BaseModel):
    """Collection of trade signals for execution."""
    
    signals: List[TradeSignal] = Field(default_factory=list)
    total_notional: float = Field(default=0.0, description="Total notional value")
    risk_score: float = Field(ge=0.0, le=1.0, description="Aggregate risk score")
    timestamp: datetime = Field(default_factory=datetime.utcnow)
    session_id: str = Field(description="Trading session identifier")


class MarketData(BaseModel):
    """Market data point."""
    
    symbol: str = Field(description="Trading symbol")
    timestamp: datetime = Field(description="Data timestamp")
    open: float = Field(description="Open price")
    high: float = Field(description="High price")
    low: float = Field(description="Low price")
    close: float = Field(description="Close price")
    volume: int = Field(description="Trading volume")
    metadata: Dict[str, Any] = Field(default_factory=dict)


class Position(BaseModel):
    """Trading position."""
    
    symbol: str = Field(description="Trading symbol")
    quantity: int = Field(description="Position size (positive=long, negative=short)")
    avg_price: float = Field(description="Average entry price")
    market_value: float = Field(description="Current market value")
    unrealized_pnl: float = Field(description="Unrealized P&L")
    timestamp: datetime = Field(default_factory=datetime.utcnow)


class Portfolio(BaseModel):
    """Portfolio state."""
    
    cash: float = Field(description="Available cash")
    positions: List[Position] = Field(default_factory=list)
    total_value: float = Field(description="Total portfolio value")
    unrealized_pnl: float = Field(description="Total unrealized P&L")
    realized_pnl: float = Field(description="Total realized P&L")
    timestamp: datetime = Field(default_factory=datetime.utcnow)


class BacktestResult(BaseModel):
    """Backtest performance results."""
    
    start_date: datetime = Field(description="Backtest start date")
    end_date: datetime = Field(description="Backtest end date")
    initial_capital: float = Field(description="Starting capital")
    final_value: float = Field(description="Final portfolio value")
    total_return: float = Field(description="Total return percentage")
    sharpe_ratio: float = Field(description="Sharpe ratio")
    max_drawdown: float = Field(description="Maximum drawdown")
    win_rate: float = Field(description="Percentage of winning trades")
    total_trades: int = Field(description="Total number of trades")
    avg_trade_return: float = Field(description="Average return per trade")
    metadata: Dict[str, Any] = Field(default_factory=dict)


class ACUUsage(BaseModel):
    """ACU usage tracking."""
    
    operation: str = Field(description="Operation that consumed ACUs")
    acu_cost: int = Field(ge=0, description="ACU cost")
    timestamp: datetime = Field(default_factory=datetime.utcnow)
    was_cached: bool = Field(default=False, description="Whether result was cached")
    cache_key: Optional[str] = Field(default=None, description="Cache key if applicable")


class TradingConfig(BaseModel):
    """Trading configuration."""
    
    model_config = ConfigDict(arbitrary_types_allowed=True)
    
    mode: TradingMode = Field(default=TradingMode.PAPER, description="Trading mode")
    max_acu_budget: int = Field(default=20, gt=0, description="Maximum ACU budget")
    max_position_size: float = Field(default=10000.0, gt=0, description="Maximum position size")
    max_portfolio_risk: float = Field(default=0.02, gt=0, le=1, description="Maximum portfolio risk")
    stop_loss_pct: float = Field(default=0.05, gt=0, le=1, description="Stop loss percentage")
    cache_ttl: int = Field(default=3600, gt=0, description="Cache TTL in seconds")
    
    def generate_cache_key(self, operation: str, **kwargs) -> str:
        """Generate cache key for operation."""
        cache_data = {
            "operation": operation,
            "mode": self.mode,
            **kwargs
        }
        cache_str = json.dumps(cache_data, sort_keys=True)
        return hashlib.sha256(cache_str.encode()).hexdigest()
